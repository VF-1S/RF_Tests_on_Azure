# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  name: Default
  demands:
   - agent.name -equals DESKTOP-DBNL3H0
strategy:
  matrix:
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

stagies:
  - stage: Environment
    displayName: 'Set Up Environment'
    jobs:
      - job: setup_env
        displayName: Build Deployment Package
        pool:
          name: Default
          demands:
            - agent.name -equals DESKTOP-DBNL3H0
        strategy:
          matrix:
            Python37:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'
          - script: |
            py -m venv env
            call .\env\Scripts\activate.bat
            displayName: 'Create Virtual Environment'
          - script: |
            pip install -r requirements.txt
            displayName: 'Install dependencies'
  - stage: Testing
    displayName: 'Start Testing'
    jobs:
      - job: start_tests
          displayName: Scan the Code and Start Testing
          pool:
            name: Default
            demands:
              - agent.name -equals DESKTOP-DBNL3H0
          steps:
            - script: |
                robocop -A robocop.cfg
              displayName: 'Check static code analysis of .robot files'

            - script: |
                robot -x outputxunit.xml login_tests
              displayName: 'Start testing application demo'
  - stage: Publishing
    displayName: 'Publish AT Results'
    jobs:
      - job: publish_results
        pool:
          name: Default
          demands:
            - agent.name -equals DESKTOP-DBNL3H0
        steps:
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            displayName: 'Publish Test Results outputxunit.xml'
            inputs:
              testResultsFiles: outputxunit.xml
              searchFolder: '$(Build.SourcesDirectory)'
              mergeTestResults: false
              failTaskOnFailedTests: true
